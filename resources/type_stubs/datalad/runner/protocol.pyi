import subprocess
from .exception import CommandError as CommandError
from _typeshed import Incomplete
from datalad.utils import ensure_unicode as ensure_unicode
from typing import Any

lgr: Incomplete

class GeneratorMixIn:
    result_queue: Incomplete
    def __init__(self) -> None: ...
    def send_result(self, result) -> None: ...

class WitlessProtocol:
    proc_out: bool
    proc_err: bool
    fd_infos: Incomplete
    process: Incomplete
    stdout_fileno: int
    stderr_fileno: int
    encoding: Incomplete
    def __init__(self, done_future: Any = None, encoding: str | None = None) -> None: ...
    def connection_lost(self, exc: BaseException | None) -> None: ...
    def connection_made(self, process: subprocess.Popen) -> None: ...
    def pipe_connection_lost(self, fd: int, exc: BaseException | None) -> None: ...
    def pipe_data_received(self, fd: int, data: bytes) -> None: ...
    def timeout(self, fd: int | None) -> bool: ...
    def process_exited(self) -> None: ...
